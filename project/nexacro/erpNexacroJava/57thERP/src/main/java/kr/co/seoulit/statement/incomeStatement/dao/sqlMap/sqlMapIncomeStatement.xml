<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper  namespace="kr.co.seoulit.statement.incomeStatement.dao.IncomeStatementDAO">
 
	<resultMap type="incomeStatementTO" id="incomeStatementResult">
		<result property="displayName" column="DISPLAY_NAME"/>
	   	<result property="currentPeriodLeftCol" column="CURRENT_PERIOD_LEFT_COL"/>
	   	<result property="currentPeriodRightCol" column="CURRENT_PERIOD_RIGHT_COL"/>
	   	<result property="PreviousPeriodLeftCol" column="PREVIOUS_PERIOD_LEFT_COL"/>
	   	<result property="PreviousPeriodRightCol" column="PREVIOUS_PERIOD_RIGHT_COL"/>
	</resultMap>
 
  
	<select id="selectIncomeStatement" parameterType="map" resultMap="incomeStatementResult">
 <![CDATA[

/* ----------------- (1) 전기분 손익계산서 항목 계산 시작 -----------------   */

WITH EARLY_INCOME_STATEMENTS AS (   /*  전기분 초기이월 테이블의 '손익' DATA 를 계정과목 테이블과 조인  */
SELECT E1.EARLY_STATEMENTS_NO, E1.ACCOUNT_INNER_CODE, E1.ACCOUNT_NAME, E1.BALANCE_DIVISION, 
    NVL(E1.LEFT_DEBTOR_PRICE , 0) AS LEFT_DEBTOR_PRICE, 
    NVL(E1.RIGHT_CREDITS_PRICE , 0) AS RIGHT_CREDITS_PRICE, 
    A.ACCOUNT_CHARACTER , 
    A.PARENT_ACCOUNT_INNER_CODE
FROM 
    ( SELECT * FROM EARLY_STATEMENTS
        WHERE ACCOUNT_PERIOD_NO = 'BRC-01_05' 
            AND STATEMENTS_DIVISION = '손익' ) E1, 
    ACCOUNT A
WHERE E1.ACCOUNT_INNER_CODE = A.ACCOUNT_INNER_CODE (+)
) ,

EARLY_INCOME_STATEMENTS_DETAIL AS (  /* '0451 상품매출원가' 의 전기분 초기이월 상세 테이블 데이터  */
SELECT CALCULATED_ORDER , ITEM_NAME, ( NVL( PLUS_PRICE, 0) + NVL( MINUS_PRICE, 0) ) AS PRICE
FROM EARLY_STATEMENTS_DETAIL
WHERE EARLY_STATEMENTS_NO IN 
    ( SELECT EARLY_STATEMENTS_NO FROM EARLY_INCOME_STATEMENTS WHERE ACCOUNT_INNER_CODE = '0451' )
    AND ( NVL( PLUS_PRICE, 0) + NVL( MINUS_PRICE, 0) ) <> 0  
ORDER BY CALCULATED_ORDER 
) ,

EARLY_FINAL_PRODUCT_INVENTORY AS (  /* 전기분의 기말상품 재고액 */
SELECT PRICE AS EARLY_FINAL_PRODUCT_INVENTORY
FROM EARLY_INCOME_STATEMENTS_DETAIL
WHERE CALCULATED_ORDER = 5
) ,

EARLY_TOTAL_SALES AS (   /* 전기분 매출액 총합 : 계정 성격이 '매출' 인 계정의 총합  */
SELECT SUM ( RIGHT_CREDITS_PRICE ) AS EARLY_TOTAL_SALES
FROM EARLY_INCOME_STATEMENTS
WHERE ACCOUNT_CHARACTER = '매출'
) ,

EARLY_TOTAL_SALES_COST AS (   /* 전기분 매출원가 총합 : 매출원가 그룹에 속한 계정 금액의 총합  */
SELECT SUM ( E.LEFT_DEBTOR_PRICE - E.RIGHT_CREDITS_PRICE  )   /* 대변 차감분이 있는 경우 반영되도록 설정 */ 
    AS EARLY_TOTAL_SALES_COST
FROM EARLY_INCOME_STATEMENTS E
WHERE E.PARENT_ACCOUNT_INNER_CODE = '0451-0470' 
),

EARLY_MERCHANDISE_SALES_COST AS (   /* 전기분 상품매출 : 계정과목 코드 '0451'  */
SELECT E.LEFT_DEBTOR_PRICE - E.RIGHT_CREDITS_PRICE   /* 대변 차감분이 있는 경우 반영되도록 설정 */ 
    AS EARLY_MERCHANDISE_SALES_COST
FROM EARLY_INCOME_STATEMENTS E
WHERE E.ACCOUNT_INNER_CODE = '0451'
) ,

EARLY_GROSS_MARGIN AS (  /* 전기분 매출총이익 = 매출 - 매출원가 */
SELECT 
    ( SELECT EARLY_TOTAL_SALES FROM EARLY_TOTAL_SALES ) -   /* 전기분 매출액 총합 */
    ( SELECT EARLY_TOTAL_SALES_COST FROM EARLY_TOTAL_SALES_COST )   /* 전기분 매출원가 총합 */
        AS EARLY_GROSS_MARGIN
FROM DUAL
) ,

EARLY_SALES_MANAGEMENT_COST AS (  /* 전기분 판매관리비 총액 */
SELECT SUM ( E.LEFT_DEBTOR_PRICE - E.RIGHT_CREDITS_PRICE )    /* 대변 차감분이 있는 경우 반영되도록 설정 */ 
    AS EARLY_SALES_MANAGEMENT_COST
FROM EARLY_INCOME_STATEMENTS E
WHERE E.PARENT_ACCOUNT_INNER_CODE = '0801-0900'
) ,

EARLY_BUSINESS_PROFITS AS (  /* 전기분 영업이익 = 매출총이익 - 판매관리비 */
SELECT 
    ( SELECT EARLY_GROSS_MARGIN FROM EARLY_GROSS_MARGIN ) - 
    ( SELECT EARLY_SALES_MANAGEMENT_COST FROM EARLY_SALES_MANAGEMENT_COST )
    AS EARLY_BUSINESS_PROFITS
FROM DUAL
) ,

EARLY_NON_OPERATION_INCOME AS (    /*  전기분 영업외수익 총액 */
SELECT SUM ( RIGHT_CREDITS_PRICE - LEFT_DEBTOR_PRICE  )     /* 차변 차감분이 있는 경우 반영되도록 설정 */ 
    AS EARLY_NON_OPERATION_INCOME
FROM EARLY_INCOME_STATEMENTS
WHERE PARENT_ACCOUNT_INNER_CODE = '0901-0950'
) ,

EARLY_NON_OPERATION_EXPENSE AS (    /* 전기분 영업외비용 총액 */
SELECT SUM ( LEFT_DEBTOR_PRICE - RIGHT_CREDITS_PRICE )    /* 대변 차감분이 있는 경우 반영되도록 설정 */ 
    AS EARLY_NON_OPERATION_EXPENSE
FROM EARLY_INCOME_STATEMENTS
WHERE PARENT_ACCOUNT_INNER_CODE = '0951-0997'
) ,

EARLY_PROFIT_WITH_INCOME_TAX AS (  /* (전기분) 소득세비용차감전순이익 = 영업이익 + 영업외수익 - 영업외비용 */
SELECT 
    ( SELECT EARLY_BUSINESS_PROFITS FROM EARLY_BUSINESS_PROFITS ) +  /* 영업이익 */
    ( SELECT EARLY_NON_OPERATION_INCOME FROM EARLY_NON_OPERATION_INCOME ) -   /* 영업외수익 */
    ( SELECT EARLY_NON_OPERATION_EXPENSE FROM EARLY_NON_OPERATION_EXPENSE )    /* 영업외비용 */
    AS EARLY_PROFIT_WITH_INCOME_TAX
FROM DUAL
) ,

EARLY_INCOME_TAX AS (  /* 전기분 납부한 소득세 총액 */
SELECT SUM ( LEFT_DEBTOR_PRICE - RIGHT_CREDITS_PRICE )  /* 대변 차감분이 있는 경우 반영되도록 설정 */ 
    AS EARLY_INCOME_TAX
FROM EARLY_INCOME_STATEMENTS
WHERE PARENT_ACCOUNT_INNER_CODE = '0998-0999'
) ,

EARLY_PERIOD_NET_PROFIT AS (   /* 전기분 순이익 = 소득세비용차감전순이익 - 소득세비용  */
SELECT 
    ( SELECT NVL( EARLY_PROFIT_WITH_INCOME_TAX, 0 ) FROM EARLY_PROFIT_WITH_INCOME_TAX ) -   /* 소득세비용차감전순이익 */
    ( SELECT NVL( EARLY_INCOME_TAX, 0 ) FROM EARLY_INCOME_TAX )    /* 소득세비용 */
    AS EARLY_PERIOD_NET_PROFIT
FROM DUAL
) ,

/* ----------------- (2) 당기분 손익계산서 항목 계산 시작 -----------------   */

CURRENT_SLIP_DATA AS (  /* 당기분 전표 테이블에서 현재 기수 & 검색일자 이전 데이터 조회  */
SELECT * FROM SLIP
WHERE ACCOUNT_PERIOD_NO = 'BRC-01_05'
    AND APPROVAL_DATE <= #{approveDate}
) ,

CURRENT_INCOME_STATEMENTS AS (  /* 위의 전표 데이터를 분개 테이블, 계정과목 테이블과 조인  */
SELECT J.BALANCE_DIVISION, J.ACCOUNT_INNER_CODE, J.ACCOUNT_NAME, 
    NVL( J.LEFT_DEBTOR_PRICE , 0 ) AS LEFT_DEBTOR_PRICE, 
    NVL( J.RIGHT_CREDITS_PRICE , 0 ) AS RIGHT_CREDITS_PRICE,
    A.ACCOUNT_CHARACTER , 
    A.PARENT_ACCOUNT_INNER_CODE
FROM CURRENT_SLIP_DATA S, JOURNAL J, ACCOUNT A
WHERE S.SLIP_NO = J.SLIP_NO (+)
    AND J.ACCOUNT_INNER_CODE = A.ACCOUNT_INNER_CODE (+)
) ,

CURRENT_TOTAL_SALES AS (  /* 당기 총 매출액 => 당기분일 경우 매출총이익과 같다 */
SELECT nvl(SUM( RIGHT_CREDITS_PRICE - LEFT_DEBTOR_PRICE ),0)   /* 차변 차감분이 있는 경우 반영되도록 설정 */
    AS CURRENT_TOTAL_SALES
FROM CURRENT_INCOME_STATEMENTS
WHERE ACCOUNT_CHARACTER = '매출'
) ,

CURRENT_PRODUCT_PURCHASES AS (  /* '당기상품 매입액 : '0146 상품' 계정의 총합 */
SELECT nvl(SUM( LEFT_DEBTOR_PRICE - RIGHT_CREDITS_PRICE ),0)   /* 대변 차감분이 있는 경우 반영되도록 설정 */
    AS CURRENT_PRODUCT_PURCHASES
FROM CURRENT_INCOME_STATEMENTS
WHERE ACCOUNT_INNER_CODE = '0146'
) ,

CURRENT_PURCHASES_RETURNS AS (   /* '매입환출및에누리 : '0147 매입환출및에누리' 계정의 총합 */
SELECT nvl(SUM( RIGHT_CREDITS_PRICE - LEFT_DEBTOR_PRICE ),0)    /* 차변 차감분이 있는 경우 반영되도록 설정 */
    AS CURRENT_PURCHASES_RETURNS
FROM CURRENT_INCOME_STATEMENTS
WHERE ACCOUNT_INNER_CODE = '0147'
) ,

CURRENT_PURCHASES_DISCOUNT AS (   /* '매입할인 : '0148 매입할인' 계정의 총합 */
SELECT nvl(SUM( RIGHT_CREDITS_PRICE - LEFT_DEBTOR_PRICE ),0)    /* 차변 차감분이 있는 경우 반영되도록 설정 */
    AS CURRENT_PURCHASES_DISCOUNT
FROM CURRENT_INCOME_STATEMENTS
WHERE ACCOUNT_INNER_CODE = '0148'
) ,

/* 당기 기말상품재고액 = 당기 기초상품재고액 ( = 전기 기말상품재고액 ) + 당기상품 매입액 
                                - 매입환출및에누리 - 매입할인 */
CURRENT_FINAL_PROD_INVENTORY AS (  
SELECT (
    ( SELECT NVL( EARLY_FINAL_PRODUCT_INVENTORY, 0 ) FROM EARLY_FINAL_PRODUCT_INVENTORY ) + 
    ( SELECT NVL( CURRENT_PRODUCT_PURCHASES, 0 )  FROM CURRENT_PRODUCT_PURCHASES ) - 
    ( SELECT NVL( CURRENT_PURCHASES_RETURNS, 0 )  FROM CURRENT_PURCHASES_RETURNS ) - 
    ( SELECT NVL( CURRENT_PURCHASES_DISCOUNT, 0 )  FROM CURRENT_PURCHASES_DISCOUNT ) )
    AS CURRENT_FINAL_PROD_INVENTORY
FROM DUAL
) ,

CURRENT_SALES_MANAGEMENT_COST AS (  /* 당기분 판매관리비 총액 */
SELECT SUM ( LEFT_DEBTOR_PRICE - RIGHT_CREDITS_PRICE )  /* 대변 총합에서 대변 차감분 (차기 이연, 예상 등등) 총합을 뺌  */ 
    AS CURRENT_SALES_MANAGEMENT_COST
FROM CURRENT_INCOME_STATEMENTS
WHERE PARENT_ACCOUNT_INNER_CODE = '0801-0900'
) ,

CURRENT_BUSINESS_PROFITS AS (  /* 당기분 영업이익 = 매출총이익 (당기분일 경우 당기 총 매출액) - 판매관리비 */
SELECT 
   ( SELECT CURRENT_TOTAL_SALES FROM CURRENT_TOTAL_SALES ) - 
    ( SELECT CURRENT_SALES_MANAGEMENT_COST FROM CURRENT_SALES_MANAGEMENT_COST )
    AS CURRENT_BUSINESS_PROFITS
FROM DUAL
) ,

CURRENT_NON_OPERATION_INCOME AS (    /*  당기분 영업외수익 총액 */
SELECT NVL(SUM ( RIGHT_CREDITS_PRICE - LEFT_DEBTOR_PRICE ),0)    /* 차변 차감분이 있는 경우 반영되도록 설정 */
    AS CURRENT_NON_OPERATION_INCOME
FROM CURRENT_INCOME_STATEMENTS
WHERE PARENT_ACCOUNT_INNER_CODE = '0901-0950'
) ,

CURRENT_NON_OPERATION_EXPENSE AS (    /* 당기분 영업외비용 총액 */
SELECT NVL(SUM ( nvl(LEFT_DEBTOR_PRICE,0) - nvl(RIGHT_CREDITS_PRICE,0) ) ,0)    /* 대변 차감분이 있는 경우 반영되도록 설정 */
    AS CURRENT_NON_OPERATION_EXPENSE
FROM CURRENT_INCOME_STATEMENTS
WHERE PARENT_ACCOUNT_INNER_CODE = '0951-0997'
) ,

CURRENT_PROFIT_WITH_INCOME_TAX AS (  /* 당기분 소득세비용차감전순이익 = 영업이익 + 영업외수익 - 영업외비용 */
SELECT                                            /* 당기분의 경우 당기순이익과 같다  */
    ( SELECT CURRENT_BUSINESS_PROFITS FROM CURRENT_BUSINESS_PROFITS ) +  /* 영업이익 */
    ( SELECT CURRENT_NON_OPERATION_INCOME FROM CURRENT_NON_OPERATION_INCOME ) -   /* 영업외수익 */
    ( SELECT CURRENT_NON_OPERATION_EXPENSE FROM CURRENT_NON_OPERATION_EXPENSE )    /* 영업외비용 */
    AS CURRENT_PROFIT_WITH_INCOME_TAX
FROM DUAL
) ,

CURRENT_INCOME_TAX AS (  /* 당기분 납부한 소득세 총액 */
SELECT SUM ( LEFT_DEBTOR_PRICE - RIGHT_CREDITS_PRICE )      /* 대변 차감분이 있는 경우 반영되도록 설정 */
    AS CURRENT_INCOME_TAX
FROM CURRENT_INCOME_STATEMENTS
WHERE PARENT_ACCOUNT_INNER_CODE = '0998-0999'
) 

/* ----------------- (3) 출력될 레코드 UNION ALL 시작 -----------------   */

/* 매출 총액 출력 : 여기서 지정된 컬럼 별칭이 쿼리 결과의 컬럼명이 된다  */
SELECT 'I. 매출액' AS DISPLAY_NAME, 
    NULL AS CURRENT_PERIOD_LEFT_COL, 
    ( SELECT CURRENT_TOTAL_SALES FROM CURRENT_TOTAL_SALES ) AS CURRENT_PERIOD_RIGHT_COL, 
    NULL AS PREVIOUS_PERIOD_LEFT_COL, 
    ( SELECT EARLY_TOTAL_SALES FROM EARLY_TOTAL_SALES ) AS PREVIOUS_PERIOD_RIGHT_COL
FROM DUAL

UNION ALL

/* 'I. 매출액' 세부항목 */
SELECT '    ' ||   /* 계정과목명 앞의 공백 */
    ( CASE WHEN E.ACCOUNT_NAME IS NULL THEN TO_CHAR(C.ACCOUNT_NAME)
            ELSE TO_CHAR(E.ACCOUNT_NAME) END ) AS DISPLAY_NAME , 
    C.TOTAL_SUM_PRICE AS CURRENT_PERIOD_LEFT_COLUMN ,
    NULL AS CURRENT_PERIOD_RIGHT_COLUMN ,
    E.RIGHT_CREDITS_PRICE AS PREVIOUS_LEFT_COLUMN , 
    NULL AS PREVIOUS_RIGHT_COLUMN 
FROM ( 
    SELECT * FROM EARLY_INCOME_STATEMENTS   /*  전기분 DATA 는 이미 계정별로 합쳐져있음   */
    WHERE ACCOUNT_CHARACTER = '매출' 
    ORDER BY ACCOUNT_INNER_CODE ) E  
FULL OUTER JOIN (    /* 당기분 DATA 는 반드시 Group By   */
    SELECT ACCOUNT_INNER_CODE, ACCOUNT_NAME, 
        SUM( RIGHT_CREDITS_PRICE - LEFT_DEBTOR_PRICE ) AS TOTAL_SUM_PRICE  /* 대변에서 차변 차감분 (차기 이연, 예상 등등) 을 뺀 총합  */ 
    FROM CURRENT_INCOME_STATEMENTS 
    WHERE ACCOUNT_CHARACTER = '매출' 
    GROUP BY ACCOUNT_INNER_CODE, ACCOUNT_NAME 
    ORDER BY ACCOUNT_INNER_CODE ) C
ON E.ACCOUNT_INNER_CODE = C.ACCOUNT_INNER_CODE

UNION ALL

SELECT 'II. 매출원가' AS DISPLAY_NAME, 
    NULL, 
    NULL,
    NULL,
    ( SELECT EARLY_TOTAL_SALES_COST FROM EARLY_TOTAL_SALES_COST )
FROM DUAL

UNION ALL 

/* 상품매출원가 출력 */
SELECT '    ' || '상품매출원가' AS DISPLAY_NAME, 
    NULL, 
    NULL,
    NULL,
    ( SELECT EARLY_MERCHANDISE_SALES_COST FROM EARLY_MERCHANDISE_SALES_COST )
FROM DUAL

UNION ALL

/* ----------------   상품매출원가 세부 항목들 추가 시작 -------------- */

SELECT '    ' || '    ' || '기초상품재고액' AS DISPLAY_NAME, 
    ( SELECT EARLY_FINAL_PRODUCT_INVENTORY FROM EARLY_FINAL_PRODUCT_INVENTORY ) , 
    NULL,
    ( SELECT PRICE FROM EARLY_INCOME_STATEMENTS_DETAIL WHERE CALCULATED_ORDER = 1 ), 
    NULL
FROM DUAL

UNION ALL

SELECT '    ' || '    ' || '당기상품매입액' AS DISPLAY_NAME, 
    ( SELECT CURRENT_PRODUCT_PURCHASES FROM CURRENT_PRODUCT_PURCHASES ) , 
    NULL,
    ( SELECT PRICE FROM EARLY_INCOME_STATEMENTS_DETAIL WHERE CALCULATED_ORDER = 2 ), 
    NULL
FROM DUAL

UNION ALL

SELECT '    ' || '    ' || '매입환출및에누리' AS DISPLAY_NAME, 
    ( SELECT CURRENT_PURCHASES_RETURNS FROM CURRENT_PURCHASES_RETURNS ) , 
    NULL,
    ( SELECT PRICE FROM EARLY_INCOME_STATEMENTS_DETAIL WHERE CALCULATED_ORDER = 3 ), 
    NULL
FROM DUAL
WHERE ( SELECT CURRENT_PURCHASES_RETURNS FROM CURRENT_PURCHASES_RETURNS ) IS NOT NULL
    AND ( SELECT PRICE FROM EARLY_INCOME_STATEMENTS_DETAIL WHERE CALCULATED_ORDER = 3 ) IS NOT NULL

UNION ALL

SELECT '    ' || '    ' || '매입할인' AS DISPLAY_NAME, 
    ( SELECT CURRENT_PURCHASES_DISCOUNT FROM CURRENT_PURCHASES_DISCOUNT ) , 
    NULL,
    ( SELECT PRICE FROM EARLY_INCOME_STATEMENTS_DETAIL WHERE CALCULATED_ORDER = 4 ), 
    NULL
FROM DUAL
WHERE ( SELECT CURRENT_PURCHASES_DISCOUNT FROM CURRENT_PURCHASES_DISCOUNT ) IS NOT NULL
    AND ( SELECT PRICE FROM EARLY_INCOME_STATEMENTS_DETAIL WHERE CALCULATED_ORDER = 4 ) IS NOT NULL

UNION ALL

SELECT '    ' || '    ' || '기말상품재고액' AS DISPLAY_NAME, 
    ( SELECT CURRENT_FINAL_PROD_INVENTORY FROM CURRENT_FINAL_PROD_INVENTORY ) ,
    NULL,
    ( SELECT PRICE FROM EARLY_INCOME_STATEMENTS_DETAIL WHERE CALCULATED_ORDER = 5 ), 
    NULL
FROM DUAL

/* ----------------   상품매출원가 세부 항목들 추가 끝 -------------- */

UNION ALL

SELECT 'III. 매출총이익' AS DISPLAY_NAME, 
    NULL,
    ( SELECT CURRENT_TOTAL_SALES FROM CURRENT_TOTAL_SALES ) ,
    NULL,
    ( SELECT EARLY_GROSS_MARGIN FROM EARLY_GROSS_MARGIN )
FROM DUAL

UNION ALL

SELECT 'IV. 판매관리비' AS DISPLAY_NAME, 
    NULL,
    ( SELECT CURRENT_SALES_MANAGEMENT_COST FROM CURRENT_SALES_MANAGEMENT_COST ) ,
    NULL,
    ( SELECT EARLY_SALES_MANAGEMENT_COST FROM EARLY_SALES_MANAGEMENT_COST )
FROM DUAL

UNION ALL

/* 'IV. 판매관리비' 세부 항목 */
SELECT  '    ' ||   /* 계정과목명 앞의 공백 */
    ( CASE WHEN E.ACCOUNT_NAME IS NULL THEN TO_CHAR(C.ACCOUNT_NAME)
            ELSE TO_CHAR(E.ACCOUNT_NAME) END ) AS DISPLAY_NAME , 
    C.TOTAL_SUM_PRICE AS CURRENT_PERIOD_LEFT_COLUMN ,  
    NULL AS CURRENT_PERIOD_RIGHT_COLUMN ,
    E.LEFT_DEBTOR_PRICE AS PREVIOUS_LEFT_COLUMN , 
    NULL AS PREVIOUS_RIGHT_COLUMN 
FROM ( 
    SELECT * FROM EARLY_INCOME_STATEMENTS      /*  전기분 DATA 는 이미 계정별로 합쳐져있음   */
    WHERE PARENT_ACCOUNT_INNER_CODE = '0801-0900' 
    ORDER BY ACCOUNT_INNER_CODE ) E  
FULL OUTER JOIN (    /* 당기분 DATA 는 반드시 Group By   */
    SELECT ACCOUNT_INNER_CODE, ACCOUNT_NAME, 
        SUM( LEFT_DEBTOR_PRICE - RIGHT_CREDITS_PRICE ) AS TOTAL_SUM_PRICE  /* 차변에서 대변 차감분 (차기 이연, 예상 등등) 을 뺀 총합  */ 
    FROM CURRENT_INCOME_STATEMENTS 
    WHERE PARENT_ACCOUNT_INNER_CODE = '0801-0900'
    GROUP BY ACCOUNT_INNER_CODE, ACCOUNT_NAME 
    ORDER BY ACCOUNT_INNER_CODE ) C
ON E.ACCOUNT_INNER_CODE = C.ACCOUNT_INNER_CODE

UNION ALL

SELECT 'V. 영업이익' AS DISPLAY_NAME, 
    NULL ,
    ( SELECT CURRENT_BUSINESS_PROFITS FROM CURRENT_BUSINESS_PROFITS ) ,
    NULL ,
    ( SELECT EARLY_BUSINESS_PROFITS FROM EARLY_BUSINESS_PROFITS )
FROM DUAL

UNION ALL

SELECT 'VI. 영업외수익' AS DISPLAY_NAME, 
    NULL ,
    ( SELECT CURRENT_NON_OPERATION_INCOME FROM CURRENT_NON_OPERATION_INCOME ) ,
    NULL ,
    ( SELECT EARLY_NON_OPERATION_INCOME FROM EARLY_NON_OPERATION_INCOME )
FROM DUAL

UNION ALL

/* 'VI. 영업외수익' 세부항목 추가 */
SELECT '    ' ||     /* 계정과목명 앞의 공백 */
    ( CASE WHEN E.ACCOUNT_NAME IS NULL THEN TO_CHAR(C.ACCOUNT_NAME)
            ELSE TO_CHAR(E.ACCOUNT_NAME) END ) AS DISPLAY_NAME , 
    C.TOTAL_SUM_PRICE AS CURRENT_PERIOD_LEFT_COLUMN ,
    NULL AS CURRENT_PERIOD_RIGHT_COLUMN ,
    E.RIGHT_CREDITS_PRICE AS PREVIOUS_LEFT_COLUMN , 
    NULL AS PREVIOUS_RIGHT_COLUMN 
FROM ( 
    SELECT * FROM EARLY_INCOME_STATEMENTS      /*  전기분 DATA 는 이미 계정별로 합쳐져있음   */
    WHERE PARENT_ACCOUNT_INNER_CODE = '0901-0950' 
    ORDER BY ACCOUNT_INNER_CODE ) E
FULL OUTER JOIN (    /* 당기분 DATA 는 반드시 Group By   */
    SELECT ACCOUNT_INNER_CODE, ACCOUNT_NAME, 
        SUM( RIGHT_CREDITS_PRICE - LEFT_DEBTOR_PRICE ) AS TOTAL_SUM_PRICE  /* 대변에서 차변 차감분 (차기 이연, 예상 등등) 을 뺀 총합  */ 
    FROM CURRENT_INCOME_STATEMENTS 
    WHERE PARENT_ACCOUNT_INNER_CODE = '0901-0950' 
    GROUP BY ACCOUNT_INNER_CODE, ACCOUNT_NAME
    ORDER BY ACCOUNT_INNER_CODE ) C
ON E.ACCOUNT_INNER_CODE = C.ACCOUNT_INNER_CODE

UNION ALL

SELECT 'VII. 영업외비용' AS DISPLAY_NAME, 
    NULL ,
    ( SELECT CURRENT_NON_OPERATION_EXPENSE FROM CURRENT_NON_OPERATION_EXPENSE ) ,
    NULL ,
    ( SELECT EARLY_NON_OPERATION_EXPENSE FROM EARLY_NON_OPERATION_EXPENSE )
FROM DUAL

UNION ALL

/* 'VII. 영업외비용' 세부항목 추가 */
SELECT '    ' ||      /* 계정과목명 앞의 공백 */
    ( CASE WHEN E.ACCOUNT_NAME IS NULL THEN TO_CHAR(C.ACCOUNT_NAME)
            ELSE TO_CHAR(E.ACCOUNT_NAME) END ) AS DISPLAY_NAME , 
    C.TOTAL_SUM_PRICE AS CURRENT_PERIOD_LEFT_COLUMN , 
    NULL AS CURRENT_PERIOD_RIGHT_COLUMN ,
    E.LEFT_DEBTOR_PRICE AS PREVIOUS_LEFT_COLUMN , 
    NULL AS PREVIOUS_RIGHT_COLUMN 
FROM ( 
    SELECT * FROM EARLY_INCOME_STATEMENTS      /*  전기분 DATA 는 이미 계정별로 합쳐져있음   */
    WHERE PARENT_ACCOUNT_INNER_CODE = '0951-0997' 
    ORDER BY ACCOUNT_INNER_CODE ) E
FULL OUTER JOIN (    /* 당기분 DATA 는 반드시 Group By   */
    SELECT ACCOUNT_INNER_CODE, ACCOUNT_NAME, 
        SUM( LEFT_DEBTOR_PRICE - RIGHT_CREDITS_PRICE ) AS TOTAL_SUM_PRICE  /* 차변에서 대변 차감분 (차기 이연, 예상 등등) 을 뺀 총합  */ 
    FROM CURRENT_INCOME_STATEMENTS 
    WHERE PARENT_ACCOUNT_INNER_CODE = '0951-0997' 
    GROUP BY ACCOUNT_INNER_CODE, ACCOUNT_NAME 
    ORDER BY ACCOUNT_INNER_CODE ) C
ON E.ACCOUNT_INNER_CODE = C.ACCOUNT_INNER_CODE

UNION ALL

SELECT 'VIII. 소득세차감전이익' AS DISPLAY_NAME, 
    NULL ,
    ( SELECT CURRENT_PROFIT_WITH_INCOME_TAX FROM CURRENT_PROFIT_WITH_INCOME_TAX ) ,
    NULL ,
    ( SELECT EARLY_PROFIT_WITH_INCOME_TAX FROM EARLY_PROFIT_WITH_INCOME_TAX )
FROM DUAL

UNION ALL

SELECT 'IX. 소득세등' AS DISPLAY_NAME, 
    NULL ,
    ( SELECT CURRENT_INCOME_TAX FROM CURRENT_INCOME_TAX ) ,
    NULL ,
    ( SELECT EARLY_INCOME_TAX FROM EARLY_INCOME_TAX )
FROM DUAL

UNION ALL 

SELECT 'X. 당기순이익' AS DISPLAY_NAME, 
    NULL ,
    ( SELECT CURRENT_PROFIT_WITH_INCOME_TAX FROM CURRENT_PROFIT_WITH_INCOME_TAX ) ,
    NULL ,
    ( SELECT EARLY_PERIOD_NET_PROFIT FROM EARLY_PERIOD_NET_PROFIT )
FROM DUAL
	   ]]>
	</select> 
 
 
 
</mapper>
 
 