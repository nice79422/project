<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper  namespace="kr.co.seoulit.statement.totalTrialBalance.dao.TotalTrialBalanceDAO">

	<resultMap type="totalTrialBalanceTO" id="totalTrialBalanceResult">
		<result property="leftDebtorBalance" column="LEFT_DEBTOR_BALANCE" />
		<result property="leftDebtorSum" column="LEFT_DEBTOR_SUM" />
		<result property="accountName" column="ACCOUNT_NAME" />
		<result property="rightCreditsSum" column="RIGHT_CREDITS_SUM" />
		<result property="rightCreditsBalance" column="RIGHT_CREDITS_BALANCE" />
    </resultMap>

 	<parameterMap id="proceduerResultMap" type="map">
      	<parameter property="approvalDate" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
      	<parameter property="errorCode" javaType="int" jdbcType="NUMERIC" mode="OUT" />
      	<parameter property="errorMsg" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
      	<parameter property="result" javaType="java.sql.ResultSet" jdbcType="CURSOR" mode="OUT" resultMap="totalTrialBalanceResult"/>
 	</parameterMap>

   	<select id="selectTotalTrialBalanceList" parameterType="map" resultMap="totalTrialBalanceResult">
    	<![CDATA[
			SELECT J3.LEFT_BALANCE AS LEFT_DEBTOR_BALANCE
			,J3.LEFT_DEBTOR_SUM AS LEFT_DEBTOR_SUM
			,DECODE(GID,7,'합계',3,A_GROUP_CODE,1,' '||B_ACCOUNT_NAME,0,'      '||J3.C_ACCOUNT_NAME) AS ACCOUNT_NAME
			,RIGHT_CREDITS_SUM AS RIGHT_CREDITS_SUM
			,J3.RIGHT_BALANCE AS RIGHT_CREDITS_BALANCE
			,GID --그리드화면에 보여지는 색상 연출을 위해 사용
			FROM (
            SELECT --- ACCOUNT 테이블과의 두번째 조인,  하위계정의 부모코드와 A2 테이블의 계정명을 연결시켜준다
             A2.PARENT_ACCOUNT_INNER_CODE AS ACODE --최상위계정 코드
            ,J2.GROUP_CODE AS A_GROUP_CODE --그룹코드(최상위계정의 이름)
            ,J2.PARENT_ACCOUNT_INNER_CODE AS BCODE --중위계정코드
            ,A2.ACCOUNT_NAME AS B_ACCOUNT_NAME --중위계정의 이름
            ,J2.ACCOUNT_INNER_CODE AS CCODE --최하위코드 --
            ,J2.C_ACCOUNT_NAME AS C_ACCOUNT_NAME --최하위코드의 이름
            ,SUM(J2.LEFT_DEBTOR_PRICE) AS LEFT_DEBTOR_SUM
            ,SUM(J2.RIGHT_CREDITS_PRICE) AS RIGHT_CREDITS_SUM
            ,SUM(J2.LEFT_BALANCE) AS LEFT_BALANCE
            ,SUM(J2.RIGHT_BALANCE) AS RIGHT_BALANCE
            ,GROUPING_ID(A2.PARENT_ACCOUNT_INNER_CODE,J2.PARENT_ACCOUNT_INNER_CODE,J2.ACCOUNT_INNER_CODE) AS GID -- 이후 데이터를 정리하기 위해 사용함 --하나 rollup될때마다 이진수로 빠져나감(1,3,7...) 
            ,DENSE_RANK() OVER(ORDER BY J2.GROUP_CODE) AS DRN ---최종적으로 자산,부채,자본,수익,비용,기타의 순서를 가지게 해줌
            FROM
            (
			SELECT CASE WHEN ACCOUNT_DIVISION  IN ('차변')
      		THEN SUM(LEFT_DEBTOR_PRICE-RIGHT_CREDITS_PRICE) ELSE 0 END AS  LEFT_BALANCE
			,SUM(LEFT_DEBTOR_PRICE) AS LEFT_DEBTOR_PRICE
          	,A.ACCOUNT_NAME AS C_ACCOUNT_NAME ---최하위계정과 이어진 계정명
          	,A.PARENT_ACCOUNT_INNER_CODE --최하위계정의 부모코드
          	,J.ACCOUNT_INNER_CODE -- 최하위 계정의 코드번호
          	,A.GROUP_CODE ---최상위계정분류
          	,A.ACCOUNT_DIVISION
          	,SUM(RIGHT_CREDITS_PRICE) AS RIGHT_CREDITS_PRICE
			,CASE WHEN ACCOUNT_DIVISION IN ('대변')
      		THEN SUM(RIGHT_CREDITS_PRICE-LEFT_DEBTOR_PRICE) ELSE  0 END  AS RIGHT_BALANCE
			FROM(
            SELECT E.ACCOUNT_INNER_CODE AS ACCOUNT_INNER_CODE
            ,NVL(E.LEFT_DEBTOR_PRICE,0) AS LEFT_DEBTOR_PRICE
            ,NVL(E.RIGHT_CREDITS_PRICE,0) AS RIGHT_CREDITS_PRICE
            FROM EARLY_STATEMENTS E
            WHERE E.ACCOUNT_PERIOD_NO = 'BRC-01_01'
            AND E.STATEMENTS_DIVISION = '재무'

            UNION ALL

            SELECT J.ACCOUNT_INNER_CODE AS ACCOUNT_INNER_CODE
            ,NVL(J.LEFT_DEBTOR_PRICE,0) AS LEFT_DEBTOR_PRICE
            ,NVL(J.RIGHT_CREDITS_PRICE,0) AS RIGHT_CREDITS_PRICE
            FROM SLIP S, JOURNAL J
            WHERE  S.ACCOUNT_PERIOD_NO = 'BRC-01_02'
            AND S.SLIP_NO = J.SLIP_NO
            AND S.APPROVAL_DATE <= #{approvalDate}) J  ---
            , ACCOUNT A --- 첫번째 조인으로 최하위계정과 이름을 이어줌, 동시에 이후 최상위계정코드와 맺어질 그룹코드도 확보해둠
            WHERE J.ACCOUNT_INNER_CODE=A.ACCOUNT_INNER_CODE
            GROUP BY A.ACCOUNT_DIVISION,A.GROUP_CODE,A.PARENT_ACCOUNT_INNER_CODE,J.ACCOUNT_INNER_CODE,A.ACCOUNT_NAME) J2 -- 가장 작은 그룹인 ACCOUNT_INNER_CODE 기준으로 SUM이 이루어진다
            , ACCOUNT A2
            WHERE J2.PARENT_ACCOUNT_INNER_CODE=A2.ACCOUNT_INNER_CODE --- 두번째 조인으로 하위계정의 부모코드와 A2 테이블의 이너코드를 연결시켜준다   --부모코드에 이름붙이려고 조인
            GROUP BY ROLLUP ((A2.PARENT_ACCOUNT_INNER_CODE,J2.GROUP_CODE),(J2.PARENT_ACCOUNT_INNER_CODE,A2.ACCOUNT_NAME),(J2.ACCOUNT_INNER_CODE,J2.C_ACCOUNT_NAME)))J3 ----롤업으로 각계정별 합계를 구합과 동시에 같은 레벨의 그룹을 같이 빠지도록 유도한다,
            --- 이 경우 (A2.PARENT_ACCOUNT_INNER_CODE,J2.GROUP_CODE) A2테이블의 부모코드가 자연히 이전에 확보해둔 그룹코드와 같은 레벨에 속함
            ORDER BY DRN,BCODE NULLS FIRST,CCODE NULLS FIRST,ACODE NULLS LAST
            ---DRN 을 가장 앞에 두어 정열(C코드순으로 정열됨), B코드가 없는것을 위로(A코드급이 위로감), C코드가 없는것을 위로(B코드급이 위로감)
   	   		]]>
   	</select>


</mapper>